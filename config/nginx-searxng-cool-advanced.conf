# SearXNG-Cool Advanced NGINX Configuration
# Based on NGINX official documentation best practices
# Optimized for reverse proxy, security, and performance

# Upstream server definitions for load balancing and failover
upstream flask_orchestrator {
    server 127.0.0.1:8889 max_fails=3 fail_timeout=30s;
    # Add more servers for load balancing:
    # server 127.0.0.1:8890 backup;
}

upstream searxng_core {
    server 127.0.0.1:8888 max_fails=3 fail_timeout=30s;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=search:10m rate=5r/s;

server {
    listen 8095;
    server_name localhost;
    
    # Optimize client settings
    client_max_body_size 1M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    
    # Enhanced security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Robots-Tag "noindex, nofollow" always;
    add_header X-Download-Options noopen always;
    add_header X-Permitted-Cross-Domain-Policies none always;
    add_header Referrer-Policy "no-referrer" always;
    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Hide server information
    server_tokens off;
    more_clear_headers Server;
    
    # Compression for better performance
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Default error page location
    location = /404.html {
        root /var/www/html;
        internal;
    }
    
    location = /50x.html {
        root /var/www/html;
        internal;
    }
    
    # Health check endpoint (exact match for performance)
    location = /health {
        proxy_pass http://flask_orchestrator/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Health check optimizations
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        proxy_buffering off;
        
        access_log off;
    }
    
    # API routes with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://flask_orchestrator/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Content-Type application/json;
        
        # API optimizations
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # Authentication routes
    location /auth/ {
        proxy_pass http://flask_orchestrator/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Auth specific settings
        proxy_connect_timeout 15s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # WebSocket connections for real-time features
    location /ws/ {
        proxy_pass http://flask_orchestrator/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # WebSocket optimizations
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
    }
    
    # Search requests with rate limiting (exact match)
    location = /search {
        limit_req zone=search burst=10 nodelay;
        
        proxy_pass http://searxng_core/search;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Search-specific optimizations
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Static files with aggressive caching
    location /static/ {
        proxy_pass http://searxng_core/static/;
        
        # Cache static files aggressively
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "STATIC";
        
        # Static file optimizations
        proxy_buffering on;
        proxy_cache_valid 200 1y;
    }
    
    # Favicon and robots.txt (exact matches)
    location = /favicon.ico {
        proxy_pass http://searxng_core/favicon.ico;
        expires 7d;
        add_header Cache-Control "public";
        access_log off;
    }
    
    location = /robots.txt {
        proxy_pass http://searxng_core/robots.txt;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # OpenSearch XML
    location = /opensearch.xml {
        proxy_pass http://searxng_core/opensearch.xml;
        expires 1h;
        add_header Cache-Control "public";
    }
    
    # Admin and configuration endpoints (restrict access)
    location /config {
        # Restrict to localhost only
        allow 127.0.0.1;
        allow ::1;
        deny all;
        
        proxy_pass http://flask_orchestrator/config;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    location /status {
        # Restrict to localhost only
        allow 127.0.0.1;
        allow ::1;
        deny all;
        
        proxy_pass http://flask_orchestrator/status;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # Fallback proxy for unmatched requests (catch-all)
    location / {
        # Try Flask orchestrator first, then fallback to SearXNG
        try_files $uri @flask_fallback;
    }
    
    # Flask orchestrator fallback
    location @flask_fallback {
        proxy_pass http://flask_orchestrator;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Fallback to SearXNG on Flask errors
        proxy_intercept_errors on;
        error_page 500 502 503 504 = @searxng_fallback;
    }
    
    # SearXNG direct fallback
    location @searxng_fallback {
        proxy_pass http://searxng_core;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Enhanced logging
    access_log /var/log/nginx/searxng_access.log combined;
    error_log /var/log/nginx/searxng_error.log warn;
}

# Default server block for unmatched requests
server {
    listen 8095 default_server;
    server_name _;
    
    # Return 444 (connection closed) for unmatched requests
    return 444;
}